@page "/staffs/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>StaffCreate</h3>
<EditForm Model="@staff" OnValidSubmit="CreateStaff">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Staff Name: </label>
        <div>
            <InputText @bind-Value="@staff.StaffName" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffName )" />
        </div>
    </div>

    <div class="form-group">
        <label>Staff Contact: </label>
        <div>
            <InputText @bind-Value="@staff.StaffContact" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffContact )" />
        </div>
    </div>

    <div class="form-group">
        <label>Staff Position: </label>
        <div>
            <InputText @bind-Value="@staff.StaffPosition" class="form-control" />
            <ValidationMessage For="@(() => staff.StaffPosition )" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Staff
    </button>

</EditForm>

@code {
    Staff staff = new Staff();
    private IList<Staff>? Staffs;
    private IList<Customer>? Customers;
    private IList<Vehicle>? Vehicles;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task CreateStaff()
    {
        await _client.PostAsJsonAsync(Endpoints.StaffsEndpoint, staff);
        _navManager.NavigateTo("/staffs");
    }
}
