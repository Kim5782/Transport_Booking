@inject HttpClient _client

<EditForm Model="@payments" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Date of Booking:</label>
        <div>
            <InputSelect @bind-Value="payments.TransportBookingsId" class="form-control">
                <option value="">--Select Booking Date--</option>
                @if (TransportBookings != null)
                {
                    foreach (var transportbooking in TransportBookings)
                    {
                        <option value="@transportbooking.Id">@transportbooking.DateIn</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => payments.TransportBookingsId)" />
        </div>
    </div>
    </fieldset>

    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Payment Amount: </label>
        <div>
            <InputNumber @bind-Value="@payments.Amount" class="form-control" />
            <ValidationMessage For="@(() => payments.Amount )" />
        </div>
    </div>
    </fieldset>

    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Date:</label>
        <div>
            <InputDate @bind-Value="payments.PaymentDate" class="form-control" />
            @if (payments.Id > 0)
            {
                <div class="form-group">
                    <label>Date: </label>
                    <div>
                        <InputDate @bind-Value="@payments.PaymentDate" class="form-control" />
                        <ValidationMessage For="@(() => payments.PaymentDate)" />
                    </div>
                </div>
            }
            <ValidationMessage For="@(() => payments.PaymentDate)" />
        </div>
    </div>
    </fieldset>

    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Method: </label>
        <div>
            <InputText @bind-Value="@payments.PaymentMethod" class="form-control" />
            <ValidationMessage For="@(() => payments.PaymentMethod)" />
        </div>
    </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="payments" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Payment? payments { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<TransportBooking>? TransportBookings;
    protected async override Task OnInitializedAsync()
    {
        TransportBookings = await _client.GetFromJsonAsync<List<TransportBooking>>($"{Endpoints.TransportBookingsEndpoint}");
    }
}