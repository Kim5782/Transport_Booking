@page "/transportbookings/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<div class="navbar">
    <a href="authentication/profile">Profile</a>
    <a href="/">Home</a>
    <a href="authentication/register">Register</a>
    <a href="authentication/login">Login</a>
    <a href="/about-us">About Us</a>
    <a href="/pg">Price Guide</a>
    <a href="/feedbacks">Contact Us</a>
    <a href="/vehicles">Vehicles</a>]
    <a href="/customers">Customers</a>
    <a href="/staffs">Staffs</a>
    <a href="/transportbookings">Bookings</a>
    <a href="/payments">Payment</a>
</div>

<h3>CreateTB</h3>
<br />

<FormComponent ButtonText="Create Booking" transportBooking="transportBooking" OnValidSubmit="@CreateTransportBooking" />

@code {
    TransportBooking transportBooking = new TransportBooking();
    private IList<Staff>? Staffs;
    private IList<Customer>? Customers;
    private IList<Vehicle>? Vehicles;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task CreateTransportBooking()
    {
        await _client.PostAsJsonAsync(Endpoints.TransportBookingsEndpoint, transportBooking);
        _navManager.NavigateTo("/transportbookings");
    }
}
