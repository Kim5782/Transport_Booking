@page "/TransportBooking/edit/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>EditTB</h3>

<div class="navbar">
    <a href="authentication/profile">Profile</a>
    <a href="/">Home</a>
    <a href="authentication/register">Register</a>
    <a href="authentication/login">Login</a>
    <a href="/about-us">About Us</a>
    <a href="/pg">Price Guide</a>
    <a href="/feedbacks">Contact Us</a>
    <a href="/vehicles">Vehicles</a>]
    <a href="/customers">Customers</a>
    <a href="/staffs">Staffs</a>
    <a href="/transportbookings">Bookings</a>
    <a href="/payments">Payment</a>
</div>


<FormComponent ButtonText="Update" OnValidSubmit="EditTransportBooking" transportBooking="transportBookings" />

@code {
    [Parameter] public int id { get; set; }
    TransportBooking? transportBookings = new TransportBooking();

    protected async override Task OnParametersSetAsync()
    {
        transportBookings = await
       _client.GetFromJsonAsync<TransportBooking>($"{Endpoints.TransportBookingsEndpoint}/{id}");
    }

    async Task EditTransportBooking()
    {
        await _client.PutAsJsonAsync($"{Endpoints.TransportBookingsEndpoint}/{id}", transportBookings);
        _navManager.NavigateTo("/transportbookings/");

        try
        {
            var response = await _client.PutAsJsonAsync($"{Endpoints.TransportBookingsEndpoint}/{id}", transportBookings);

            if (response.IsSuccessStatusCode)
            {
                _navManager.NavigateTo("/transportbookings/");
            }
            else
            {
                
                Console.WriteLine($"Error: {response.ReasonPhrase}");
                
            }
        }
        catch (HttpRequestException httpEx)
        {
            
            Console.WriteLine($"HTTP Request Error: {httpEx.Message}");
            
        }
        catch (Exception ex)
        {
            // Handle non-HTTP exceptions
            Console.WriteLine($"Error: {ex.Message}");
            
        }
    }
}

    
  