@inject HttpClient _client
<EditForm Model="@feedback" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Date of Booking:</label>
        <div>
            <InputSelect @bind-Value="feedback.TransportBookingsId" class="form-control">
                <option value="">--Select Booking Date--</option>
                @if (TransportBookings != null)
                {
                    foreach (var transportbooking in TransportBookings)
                    {
                        <option value="@transportbooking.Id">@transportbooking.DateIn</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => feedback.TransportBookingsId)" />
        </div>
    </div>
    </fieldset>

    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Leave some feedback!: </label>
        <div>
            <InputText @bind-Value="@feedback.Comments" class="form-control" />
            <ValidationMessage For="@(() => feedback.Comments )" />
        </div>
    </div>
    </fieldset>


    <fieldset disabled="@Disabled" >
    <div class="form-group">
        <label>Rating: </label>
        <div>
            <InputNumber @bind-Value="@feedback.Rating" class="form-control" />
            <ValidationMessage For="@(() => feedback.Rating)" />
        </div>
    </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }

    <BackToList Target="feedbacks" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Feedback? feedback { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<TransportBooking>? TransportBookings;
    protected async override Task OnInitializedAsync()
    {
        TransportBookings = await _client.GetFromJsonAsync<List<TransportBooking>>($"{Endpoints.TransportBookingsEndpoint}");
    }
}
