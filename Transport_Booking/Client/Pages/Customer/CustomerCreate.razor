@page "/customers/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<div class="navbar">
    <a href="authentication/profile">Profile</a>
    <a href="/">Home</a>
    <a href="authentication/register">Register</a>
    <a href="authentication/login">Login</a>
    <a href="/about-us">About Us</a>
    <a href="/pg">Price Guide</a>
    <a href="/services">Services</a>
    <a href="/feedbacks">Contact Us</a>
    <a href="/vehicles">Vehicles</a>]
    <a href="/customers">Customers</a>
    <a href="/staffs">Staffs</a>
    <a href="/transportbookings">Bookings</a>
    <a href="/payments">Payment</a>
</div>

<h3>CustomerCreate</h3>
<br/>

<EditForm Model="@customer" OnValidSubmit="CreateCustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@customer.Name" class="form-control" />
            <ValidationMessage For="@(() => customer.Name )" />
        </div>
    </div>

    <div class="form-group">
        <label>Contact: </label>
        <div>
            <InputText @bind-Value="@customer.ContactNo" class="form-control" />
            <ValidationMessage For="@(() => customer.ContactNo )" />
        </div>
    </div>

    <div class="form-group">
        <label>Email Address: </label>
        <div>
            <InputText @bind-Value="@customer.Email" class="form-control" />
            <ValidationMessage For="@(() => customer.Email )" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Customer
    </button>

</EditForm>

@code {
    Customer customer = new Customer();
    private IList<Staff>? Staffs;
    private IList<Customer>? Customers;
    private IList<Vehicle>? Vehicles;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task CreateCustomer()
    {
        await _client.PostAsJsonAsync(Endpoints.CustomersEndpoint, customer);
        _navManager.NavigateTo("/customers");
    }
}
